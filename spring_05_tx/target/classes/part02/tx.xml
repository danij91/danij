<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

<!-- 스프링에서 트랜잭션 처리를 위해 선언적 트랜잭션(<tx:advice>)을 이용하는 방법 -->
<!-- [1] DataSource빈 선언 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin://@127.0.0.1:1521:xe" />
		<property name="username" value="hr" />
		<property name="password" value="a1234" />
	</bean>

<!-- [2] SqlSessionFactoryBean 빈 선언 -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<property name="dataSource" ref="dataSource"/>
<property name="mapperLocations" value="classpath*:part02/mapper.xml"/>
</bean>


<!-- [3] SqlSessionTemplate 빈 선언 -->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
<constructor-arg ref="sqlSessionFactory" index="0" />
</bean>

<!-- Spring Jdbc나 Mybatis를 이용해서 DB연동을 처리하는 경우 dataSourceTransactionManager가 트랜잭션 관리자로 사용된다. -->

<!-- [4] TransactionManager 빈 선언 :트랜잭션을 관리해주는 빈 -->
<bean id="transactionManager"
class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<property name="dataSource" ref="dataSource"/>
</bean>

<!-- [5] 선언적 트랜잭션:<tx:advice>태그를 이용한 트랜잭션 처리
트랜잭션 매니저는 4번 빈 id를 적으면 된다.

 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes>
	<!-- rollback-for="java.lang.Exception" : Exception이 발생하면 rollback을 시키겠다. -->
	<!-- insertProcess 메소드가 어디에 속했는지 설정해줘야함. 하단에 설정-->
	<tx:method name="insertProcess" rollback-for="java.lang.Exception"/>
	</tx:attributes>
</tx:advice>

<!-- [6] 트랜잭션으로 처리할 메소드에 트랜잭션 매니저 설정 -->
<aop:config>
	<!-- <aop:advisor advice-ref="txAdvice" pointcut="execution(* part02.ServiceImp.insertProcess(..))"/> -->
	<!-- 참조해서 사용할 때 -->
	<aop:pointcut expression="execution(* part02.ServiceImp.insertProcess(..))" id="aa"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="aa"/>
</aop:config>

	<!-- [7] MemDaoImp 빈 선언 -->
	<bean id="dao" class="part02.MemDaoImp">
		<property name="sqlSession" ref="sqlSession" />
	</bean>
	
	<!-- [8] ServiceImp 빈 선언 -->
	<bean id="svc" class="part02.ServiceImp">
		<property name="dao" ref="dao" />
		<!-- 선언적 트랜잭션이라 필요없음<property name="transactionTemplate" ref="TransactionTemplate"/> -->
	</bean>
</beans>
